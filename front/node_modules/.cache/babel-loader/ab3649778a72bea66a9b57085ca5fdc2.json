{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { LIST_EDEG1CODE } from \"../globalValue\";\nexport var initialState = {\n  edoc: null,\n  // 전자 결재 리스트\n  isLogging: false // 데이터 불러우는 중\n\n}; // 액션 정의\n// 결재 리스트 불러오기\n\nexport var ADD_EDOC_REQUEST = \"ADD_EDOC_REQUEST\";\nexport var ADD_EDOC_SECCESS = \"ADD_EDOC_SECCESS\";\nexport var ADD_EDOC_FAILURE = \"ADD_EDOC_FAILURE\"; // 결재 리스트 업데이트 하기\n\nexport var UPDATE_EDOC_REQUEST = \"UPDATE_EDOC_REQUEST\";\nexport var UPDATE_EDOC_SECCESS = \"UPDATE_EDOC_SECCESS\";\nexport var UPDATE_EDOC_FAILURE = \"UPDATE_EDOC_FAILURE\";\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_EDOC_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLogging: true\n        });\n      }\n\n    case ADD_EDOC_SECCESS:\n      {\n        console.log(\"matchedData\", action.data);\n        var matchedData = action.data.map(function (item, index) {\n          var test = LIST_EDEG1CODE.filter(function (c) {\n            return c.value = item.EDEG2Code;\n          })[0];\n          console.log(test);\n          return _objectSpread({}, item, {\n            EDEG2Code: action.data.EDEG2Code\n          });\n        });\n        console.log(\"matchedData\", matchedData);\n        return _objectSpread({}, state, {\n          isLogging: false,\n          edoc: matchedData\n        });\n      }\n\n    case ADD_EDOC_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLogging: false\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/reducers/edocument01.js"],"names":["LIST_EDEG1CODE","initialState","edoc","isLogging","ADD_EDOC_REQUEST","ADD_EDOC_SECCESS","ADD_EDOC_FAILURE","UPDATE_EDOC_REQUEST","UPDATE_EDOC_SECCESS","UPDATE_EDOC_FAILURE","reducer","state","action","type","console","log","data","matchedData","map","item","index","test","filter","c","value","EDEG2Code"],"mappings":";AAAA,SAASA,cAAT,QAA+B,gBAA/B;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,IAAI,EAAE,IADoB;AACd;AACZC,EAAAA,SAAS,EAAE,KAFe,CAET;;AAFS,CAArB,C,CAKP;AACA;;AACA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB,C,CAEP;;AACA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;;AAEP,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBV,YAAyB;AAAA,MAAXW,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,gBAAL;AAAuB;AACrB,iCACKO,KADL;AAEER,UAAAA,SAAS,EAAE;AAFb;AAID;;AACD,SAAKE,gBAAL;AAAuB;AACrBS,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,MAAM,CAACI,IAAlC;AACA,YAAIC,WAAW,GAAGL,MAAM,CAACI,IAAP,CAAYE,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACjD,cAAIC,IAAI,GAAGrB,cAAc,CAACsB,MAAf,CAAsB,UAAAC,CAAC;AAAA,mBAAKA,CAAC,CAACC,KAAF,GAAUL,IAAI,CAACM,SAApB;AAAA,WAAvB,EAAuD,CAAvD,CAAX;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACA,mCACKF,IADL;AAEEM,YAAAA,SAAS,EAAEb,MAAM,CAACI,IAAP,CAAYS;AAFzB;AAID,SAPiB,CAAlB;AAQAX,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,WAA3B;AACA,iCACKN,KADL;AAEER,UAAAA,SAAS,EAAE,KAFb;AAGED,UAAAA,IAAI,EAAEe;AAHR;AAKD;;AACD,SAAKX,gBAAL;AAAuB;AACrB,iCACKK,KADL;AAEER,UAAAA,SAAS,EAAE;AAFb;AAID;;AACD;AAAS;AACP,iCACKQ,KADL;AAGD;AAlCH;AAoCD,CArCD;;AAuCA,eAAeD,OAAf","sourcesContent":["import { LIST_EDEG1CODE } from \"../globalValue\";\n\nexport const initialState = {\n  edoc: null, // 전자 결재 리스트\n  isLogging: false // 데이터 불러우는 중\n};\n\n// 액션 정의\n// 결재 리스트 불러오기\nexport const ADD_EDOC_REQUEST = \"ADD_EDOC_REQUEST\";\nexport const ADD_EDOC_SECCESS = \"ADD_EDOC_SECCESS\";\nexport const ADD_EDOC_FAILURE = \"ADD_EDOC_FAILURE\";\n\n// 결재 리스트 업데이트 하기\nexport const UPDATE_EDOC_REQUEST = \"UPDATE_EDOC_REQUEST\";\nexport const UPDATE_EDOC_SECCESS = \"UPDATE_EDOC_SECCESS\";\nexport const UPDATE_EDOC_FAILURE = \"UPDATE_EDOC_FAILURE\";\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_EDOC_REQUEST: {\n      return {\n        ...state,\n        isLogging: true\n      };\n    }\n    case ADD_EDOC_SECCESS: {\n      console.log(\"matchedData\", action.data);\n      var matchedData = action.data.map((item, index) => {\n        var test = LIST_EDEG1CODE.filter(c => (c.value = item.EDEG2Code))[0];\n        console.log(test);\n        return {\n          ...item,\n          EDEG2Code: action.data.EDEG2Code\n        };\n      });\n      console.log(\"matchedData\", matchedData);\n      return {\n        ...state,\n        isLogging: false,\n        edoc: matchedData\n      };\n    }\n    case ADD_EDOC_FAILURE: {\n      return {\n        ...state,\n        isLogging: false\n      };\n    }\n    default: {\n      return {\n        ...state\n      };\n    }\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}