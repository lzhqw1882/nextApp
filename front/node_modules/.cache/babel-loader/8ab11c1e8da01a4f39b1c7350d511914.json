{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/linepayroll/Desktop/nextApp/front/pages/edocument/edocLogin.js\";\nimport React, { useState } from \"react\";\nimport { Form, Icon, Input, Button, Checkbox } from \"antd\";\n\nvar _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    id = _useState2[0],\n    setId = _useState2[1];\n\nvar onChagneId = function onChagneId(e) {\n  // state변경함수에 넘어오는 parm (e) value 값을 해준다.\n  // react에서 render되는 조건은 state가 변경되었을때마다\n  setId(e.target.value);\n}; // custom hook 사용하기\n// 위와 같이 각각의 state 마다 핸들러를 만들어줄 경우 코드가 많아짐과 관리가 힘들어진다.\n// 아래와같이 input에 관련된 커스텀을 만들고 사용하면\n// const onChagePw 등의 단순 input 함수는 재사용 할수 있다.\n\n\nvar useInput = function useInput() {\n  var initValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _useState3 = useState(initValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setter = _useState4[1];\n\n  var handler = function handler(e) {\n    setter(e.target.value);\n  };\n\n  return [value, handler];\n};\n\nvar _useInput = useInput(\"\"),\n    _useInput2 = _slicedToArray(_useInput, 2),\n    password = _useInput2[0],\n    onChangePw = _useInput2[1];\n\nvar onSubmit = function onSubmit(e) {\n  e.preventDefault();\n  console.log(\"loginbtn Clicked\", id, password);\n};\n\nvar edocLogin = function edocLogin(props) {\n  // hooks state\n  // const [state명, state변경함수] = useState(\"default값\")\n  return React.createElement(\"div\", {\n    style: {\n      padding: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Form, {\n    className: \"login-form\",\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"user\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    placeholder: \"ID\",\n    required: true,\n    onChange: onChagneId // input 은 항상 value랑 onchange가 짝이 되야 한다\n    ,\n    name: \"id\",\n    value: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"lock\",\n      style: {\n        color: \"rgba(0,0,0,.25)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }),\n    placeholder: \"PASSWORD\",\n    required: true,\n    onChange: onChangePw,\n    name: \"password\",\n    value: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"\\uB85C\\uADF8\\uC778\"))));\n};\n\nexport default edocLogin;","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/pages/edocument/edocLogin.js"],"names":["React","useState","Form","Icon","Input","Button","Checkbox","id","setId","onChagneId","e","target","value","useInput","initValue","setter","handler","password","onChangePw","onSubmit","preventDefault","console","log","edocLogin","props","padding","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,QAApC,QAAoD,MAApD;;gBACoBL,QAAQ,CAAC,EAAD,C;;IAArBM,E;IAAIC,K;;AACX,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,CAAC,EAAI;AACtB;AACA;AACAF,EAAAA,KAAK,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAL;AACD,CAJD,C,CAMA;AACA;AACA;AACA;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAsB;AAAA,MAArBC,SAAqB,uEAAT,IAAS;;AAAA,mBACbb,QAAQ,CAACa,SAAD,CADK;AAAA;AAAA,MAC9BF,KAD8B;AAAA,MACvBG,MADuB;;AAErC,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAN,CAAC,EAAI;AACnBK,IAAAA,MAAM,CAACL,CAAC,CAACC,MAAF,CAASC,KAAV,CAAN;AACD,GAFD;;AAGA,SAAO,CAACA,KAAD,EAAQI,OAAR,CAAP;AACD,CAND;;gBAQ+BH,QAAQ,CAAC,EAAD,C;;IAAhCI,Q;IAAUC,U;;AAEjB,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAT,CAAC,EAAI;AACpBA,EAAAA,CAAC,CAACU,cAAF;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCf,EAAhC,EAAoCU,QAApC;AACD,CAHD;;AAIA,IAAMM,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AACzB;AACA;AAEA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,YAAhB;AAA6B,IAAA,QAAQ,EAAEN,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,KAAK,EAAE;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEE,IAAA,WAAW,EAAC,IAFd;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,QAAQ,EAAEjB,UAJZ,CAIwB;AAJxB;AAKE,IAAA,IAAI,EAAC,IALP;AAME,IAAA,KAAK,EAAEF,EANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,KAAK,EAAE;AAAEmB,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,QAAQ,EAAER,UAJZ;AAKE,IAAA,IAAI,EAAC,UALP;AAME,IAAA,KAAK,EAAED,QANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAXF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,CArBF,CADF,CADF;AAgCD,CApCD;;AAsCA,eAAeM,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Icon, Input, Button, Checkbox } from \"antd\";\nconst [id, setId] = useState(\"\");\nconst onChagneId = e => {\n  // state변경함수에 넘어오는 parm (e) value 값을 해준다.\n  // react에서 render되는 조건은 state가 변경되었을때마다\n  setId(e.target.value);\n};\n\n// custom hook 사용하기\n// 위와 같이 각각의 state 마다 핸들러를 만들어줄 경우 코드가 많아짐과 관리가 힘들어진다.\n// 아래와같이 input에 관련된 커스텀을 만들고 사용하면\n// const onChagePw 등의 단순 input 함수는 재사용 할수 있다.\n\nconst useInput = (initValue = null) => {\n  const [value, setter] = useState(initValue);\n  const handler = e => {\n    setter(e.target.value);\n  };\n  return [value, handler];\n};\n\nconst [password, onChangePw] = useInput(\"\");\n\nconst onSubmit = e => {\n  e.preventDefault();\n  console.log(\"loginbtn Clicked\", id, password);\n};\nconst edocLogin = props => {\n  // hooks state\n  // const [state명, state변경함수] = useState(\"default값\")\n\n  return (\n    <div style={{ padding: 20 }}>\n      <Form className=\"login-form\" onSubmit={onSubmit}>\n        <div>\n          <Input\n            prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            placeholder=\"ID\"\n            required\n            onChange={onChagneId} // input 은 항상 value랑 onchange가 짝이 되야 한다\n            name=\"id\"\n            value={id}\n          />\n        </div>\n        <div>\n          <Input\n            prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n            placeholder=\"PASSWORD\"\n            required\n            onChange={onChangePw}\n            name=\"password\"\n            value={password}\n          />\n        </div>\n        <div>\n          {/* <button type=\"submit\" > 로그인 </button> 을 antd 입히면 아래와 같이 htmlType 으로 해줘야한다. */}\n          <Button type=\"primary\" htmlType=\"submit\">\n            로그인\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default edocLogin;\n"]},"metadata":{},"sourceType":"module"}