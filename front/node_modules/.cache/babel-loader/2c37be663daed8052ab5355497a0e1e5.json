{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addEDoc),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddEDoc),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(edocSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { ADD_EDOC_REQUEST, ADD_EDOC_SECCESS, ADD_EDOC_FAILURE, UPDATE_EDOC_REQUEST, UPDATE_EDOC_SECCESS, UPDATE_EDOC_FAILURE } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction addEDocAPI(data) {\n  console.log(\"getEDO123123C\", data);\n  return axios.post(\"/edoc/getEdoc\", data);\n}\n\nfunction addEDoc(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addEDoc$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"addEDoc\");\n          _context.prev = 1;\n          _context.next = 4;\n          return call(addEDocAPI, action.data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            type: ADD_EDOC_SECCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(\"err\", _context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_EDOC_FAILURE,\n            data: _context.t0.responce.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction watchAddEDoc() {\n  return _regeneratorRuntime.wrap(function watchAddEDoc$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"watchAddEDoc\");\n          _context2.next = 3;\n          return takeLatest(ADD_EDOC_REQUEST, addEDoc);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function edocSaga() {\n  return _regeneratorRuntime.wrap(function edocSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddEDoc)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/saga/edocument01.js"],"names":["addEDoc","watchAddEDoc","edocSaga","all","fork","takeLatest","put","call","ADD_EDOC_REQUEST","ADD_EDOC_SECCESS","ADD_EDOC_FAILURE","UPDATE_EDOC_REQUEST","UPDATE_EDOC_SECCESS","UPDATE_EDOC_FAILURE","axios","defaults","baseURL","addEDocAPI","data","console","log","post","action","result","type","responce"],"mappings":";;;;yBAgBUA,O;;;yBAgBAC,Y;;;yBAIeC,Q;;AApCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,yBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,IAA7B;AACA,SAAOJ,KAAK,CAACO,IAAN,CAAW,eAAX,EAA4BH,IAA5B,CAAP;AACD;;AACD,SAAUlB,OAAV,CAAkBsB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACEH,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AADF;AAAA;AAGiB,iBAAMb,IAAI,CAACU,UAAD,EAAaK,MAAM,CAACJ,IAApB,CAAV;;AAHjB;AAGQK,UAAAA,MAHR;AAAA;AAII,iBAAMjB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEf,gBADE;AAERS,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AATJ;AAUI,iBAAMd,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEd,gBADE;AAERQ,YAAAA,IAAI,EAAE,YAAEO,QAAF,CAAWP;AAFT,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUjB,YAAV;AAAA;AAAA;AAAA;AAAA;AACEkB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADF;AAEE,iBAAMf,UAAU,CAACG,gBAAD,EAAmBR,OAAnB,CAAhB;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  ADD_EDOC_REQUEST,\n  ADD_EDOC_SECCESS,\n  ADD_EDOC_FAILURE,\n  UPDATE_EDOC_REQUEST,\n  UPDATE_EDOC_SECCESS,\n  UPDATE_EDOC_FAILURE\n} from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction addEDocAPI(data) {\n  console.log(\"getEDO123123C\", data);\n  return axios.post(\"/edoc/getEdoc\", data);\n}\nfunction* addEDoc(action) {\n  console.log(\"addEDoc\");\n  try {\n    var result = yield call(addEDocAPI, action.data);\n    yield put({\n      type: ADD_EDOC_SECCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(\"err\", e);\n    yield put({\n      type: ADD_EDOC_FAILURE,\n      data: e.responce.data\n    });\n  }\n}\nfunction* watchAddEDoc() {\n  console.log(\"watchAddEDoc\");\n  yield takeLatest(ADD_EDOC_REQUEST, addEDoc);\n}\nexport default function* edocSaga() {\n  yield all([fork(watchAddEDoc)]);\n}\n"]},"metadata":{},"sourceType":"module"}