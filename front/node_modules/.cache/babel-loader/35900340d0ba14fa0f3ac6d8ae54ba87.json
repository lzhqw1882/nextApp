{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from \"../reducers/user\";\nimport { ADD_EDOC_REQUEST } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction loadUserAPI(data) {\n  console.log(\"loginAPI\", data); // 서버에 쿠키보내서 로그인 여부 확인\n\n  return axios.get(\"/user/\", {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n\n  });\n}\n\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          result = \"\";\n          _context.prev = 1;\n          _context.next = 4;\n          return call(loadUserAPI);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logoutAPI() {\n  console.log(\"looutAPI\"); // 서버에 요청을 보내는 부분\n\n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  });\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // import axios from \"axios\";\n// ------------------------------------------------------ //\n\n\nfunction loginAPI(data) {\n  console.log(\"loginAPI\", data); // 서버에 요청을 보내는 부분\n\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          result = \"\";\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(loginAPI, action.data);\n\n        case 4:\n          result = _context5.sent;\n          _context5.next = 7;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 13;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 9]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} // call = 동기요청, fork = 비동기요청","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/saga/user.js"],"names":["loadUser","watchLoadUser","logout","watchLogout","login","watchLogin","userSaga","all","fork","takeLatest","put","call","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","ADD_EDOC_REQUEST","axios","defaults","baseURL","loadUserAPI","data","console","log","get","withCredentials","action","result","type","response","logoutAPI","post","error","loginAPI"],"mappings":";;;;yBAuBUA,Q;;;yBAuBAC,a;;;yBAiBAC,M;;;yBAaAC,W;;;yBAaAC,K;;;yBAoBAC,U;;;yBAQeC,Q;;AArHzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,iBAPF,EAQEC,iBARF,EASEC,iBATF,QAUO,kBAVP;AAWA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB,EADyB,CAEzB;;AACA,SAAOJ,KAAK,CAACO,GAAN,CAAU,QAAV,EAAoB;AACzBC,IAAAA,eAAe,EAAE,IADQ,CACH;;AADG,GAApB,CAAP;AAGD;;AACD,SAAU9B,QAAV,CAAmB+B,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,MADN,GACe,EADf;AAAA;AAAA;AAGa,iBAAMrB,IAAI,CAACc,WAAD,CAAV;;AAHb;AAGIO,UAAAA,MAHJ;AAAA;AAYI,iBAAMtB,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEf,iBADE;AAERQ,YAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,WAAD,CAAT;;AAZJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBI,iBAAMhB,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEd,iBADE;AAERO,YAAAA,IAAI,EAAE,YAAEQ,QAAF,CAAWR;AAFT,WAAD,CAAT;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAAUzB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMQ,UAAU,CAACW,iBAAD,EAAoBpB,QAApB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAASmC,SAAT,GAAqB;AACnBR,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADmB,CAEnB;;AACA,SAAON,KAAK,CAACc,IAAN,CACL,cADK,EAEL,EAFK,EAGL;AACEN,IAAAA,eAAe,EAAE;AADnB,GAHK,CAAP;AAOD;;AACD,SAAU5B,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMS,IAAI,CAACwB,SAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMzB,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAElB;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAML,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEjB,eADE;AAERqB,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUlC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACQ,eAAD,EAAkBf,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;;;AACA,SAASoC,QAAT,CAAkBZ,IAAlB,EAAwB;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB,EADsB,CAEtB;;AACA,SAAOJ,KAAK,CAACc,IAAN,CAAW,aAAX,EAA0BV,IAA1B,EAAgC;AACrCI,IAAAA,eAAe,EAAE,IADoB,CACf;;AADe,GAAhC,CAAP;AAGD;;AACD,SAAU1B,KAAV,CAAgB2B,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,MADN,GACe,EADf;AAAA;AAAA;AAGa,iBAAMrB,IAAI,CAAC2B,QAAD,EAAWP,MAAM,CAACL,IAAlB,CAAV;;AAHb;AAGIM,UAAAA,MAHJ;AAAA;AAOI,iBAAMtB,GAAG,CAAC;AACR;AACAuB,YAAAA,IAAI,EAAErB,cAFE;AAGRc,YAAAA,IAAI,EAAEM,MAAM,CAACN;AAHL,WAAD,CAAT;;AAPJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcI,iBAAMhB,GAAG,CAAC;AACRuB,YAAAA,IAAI,EAAEpB,cADE;AAERa,YAAAA,IAAI,EAAE,aAAEQ,QAAF,CAAWR;AAFT,WAAD,CAAT;;AAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAAUrB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMI,UAAU,CAACK,cAAD,EAAiBV,KAAjB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;AACA;;;AAEA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,UAAD,CAAL,EAAmBG,IAAI,CAACL,WAAD,CAAvB,EAAsCK,IAAI,CAACP,aAAD,CAA1C,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGf","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST\n} from \"../reducers/user\";\nimport { ADD_EDOC_REQUEST } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction loadUserAPI(data) {\n  console.log(\"loginAPI\", data);\n  // 서버에 쿠키보내서 로그인 여부 확인\n  return axios.get(\"/user/\", {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n  });\n}\nfunction* loadUser(action) {\n  var result = \"\";\n  try {\n    result = yield call(loadUserAPI);\n    // yield put({\n    //   type: ADD_EDOC_REQUEST,\n    //   data: {\n    //     stcode: result.data.SUSTCODE,\n    //     scdbname: result.data.SCDBNAME,\n    //     schostip: result.data.SCHOSTIP\n    //   }\n    // });\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_FAILURE,\n      data: e.response.data\n    });\n  }\n}\nfunction* watchLoadUser() {\n  // takeLatest가 LOG_IN 액션이 dispatch 되길 기다려서\n  // dispatch될 때 login 제너레이터를 호출 한다.\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction logoutAPI() {\n  console.log(\"looutAPI\");\n  // 서버에 요청을 보내는 부분\n  return axios.post(\n    \"/user/logout\",\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\n// import axios from \"axios\";\n// ------------------------------------------------------ //\nfunction loginAPI(data) {\n  console.log(\"loginAPI\", data);\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n  });\n}\nfunction* login(action) {\n  var result = \"\";\n  try {\n    result = yield call(loginAPI, action.data);\n    // yield put({\n\n    // });\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // console.log(\"loginERRER\", e.response.data);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: e.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  // takeLatest가 LOG_IN 액션이 dispatch 되길 기다려서\n  // dispatch될 때 login 제너레이터를 호출 한다.\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n// 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser)]);\n}\n// call = 동기요청, fork = 비동기요청\n"]},"metadata":{},"sourceType":"module"}