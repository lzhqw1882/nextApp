{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//user 정보를 담고있는 스토어, 초기값\nexport var initialState = {\n  isLoggedIn: false,\n  user: {}\n};\nexport var LOG_IN = \"LOG_IN\"; // 액션의 이름\n\nexport var LOG_OUT = \"LOG_OUT\"; // 비동기 요청 3종 세트\n\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_OUT_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOG_OUT_REQUEST = \"LOG_IN_REQUEST\";\nvar loginAction = {\n  type: LOG_IN_REQUEST,\n  data: {\n    nickname: \"JW\"\n  }\n};\nvar logoutAction = {\n  type: LOG_OUT\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: {}\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n}; // 리액트와 연결전에 미리 이런 작업을 해두어야 한다.\n\n\nexport default reducer;","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/reducers/user.js"],"names":["initialState","isLoggedIn","user","LOG_IN","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","loginAction","type","data","nickname","logoutAction","reducer","state","action"],"mappings":";AAAA;AACA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAE,KADc;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB;AAKP,OAAO,IAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AAChC,OAAO,IAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,eAAe,GAAG,gBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,gBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,gBAAxB;AAEP,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAEL,cADY;AAElBM,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AAFY,CAApB;AAMA,IAAMC,YAAY,GAAG;AACnBH,EAAAA,IAAI,EAAER;AADa,CAArB;;AAIA,IAAMY,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBjB,YAAyB;AAAA,MAAXkB,MAAW;;AAChD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKL,cAAL;AAAqB;AACnB,iCAEKU,KAFL;AAGEhB,UAAAA,UAAU,EAAE,IAHd;AAIEC,UAAAA,IAAI,EAAEgB,MAAM,CAACL;AAJf;AAMD;;AACD,SAAKT,OAAL;AAAc;AACZ,iCACKa,KADL;AAEEhB,UAAAA,UAAU,EAAE,KAFd;AAGEC,UAAAA,IAAI,EAAE;AAHR;AAKD;;AACD;AAAS;AACP,iCACKe,KADL;AAGD;AApBH;AAsBD,CAvBD,C,CAwBA;;;AAEA,eAAeD,OAAf","sourcesContent":["//user 정보를 담고있는 스토어, 초기값\nexport const initialState = {\n  isLoggedIn: false,\n  user: {}\n};\n\nexport const LOG_IN = \"LOG_IN\"; // 액션의 이름\nexport const LOG_OUT = \"LOG_OUT\";\n\n// 비동기 요청 3종 세트\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\n\nexport const LOG_OUT_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_IN_FAILURE\";\nexport const LOG_OUT_REQUEST = \"LOG_IN_REQUEST\";\n\nconst loginAction = {\n  type: LOG_IN_REQUEST,\n  data: {\n    nickname: \"JW\"\n  }\n};\nconst logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST: {\n      return {\n        // 다음 state 변경\n        ...state,\n        isLoggedIn: true,\n        user: action.data\n      };\n    }\n    case LOG_OUT: {\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: {}\n      };\n    }\n    default: {\n      return {\n        ...state\n      };\n    }\n  }\n};\n// 리액트와 연결전에 미리 이런 작업을 해두어야 한다.\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}