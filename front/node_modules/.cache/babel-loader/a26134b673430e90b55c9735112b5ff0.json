{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addEDoc),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddEDoc),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(edocSaga);\n\nimport { all, fork, takeLatest, put, call, takeEvery } from \"redux-saga/effects\";\nimport { ADD_EDOC_REQUEST, ADD_EDOC_SECCESS, ADD_EDOC_FAILURE, UPDATE_EDOC_REQUEST, UPDATE_EDOC_SECCESS, UPDATE_EDOC_FAILURE } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction addEDocAPI(data) {\n  return axios.post(\"/edoc/getEdoc\", data);\n}\n\nfunction addEDoc(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addEDoc$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addEDocAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_EDOC_SECCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"err\", _context.t0);\n          _context.next = 13;\n          return put({\n            type: ADD_EDOC_FAILURE,\n            data: _context.t0.responce.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddEDoc() {\n  return _regeneratorRuntime.wrap(function watchAddEDoc$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"watchAddEdoc\");\n          _context2.next = 3;\n          return takeEvery(ADD_EDOC_REQUEST, addEDoc);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function edocSaga() {\n  return _regeneratorRuntime.wrap(function edocSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddEDoc)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/saga/edocument01.js"],"names":["addEDoc","watchAddEDoc","edocSaga","all","fork","takeLatest","put","call","takeEvery","ADD_EDOC_REQUEST","ADD_EDOC_SECCESS","ADD_EDOC_FAILURE","UPDATE_EDOC_REQUEST","UPDATE_EDOC_SECCESS","UPDATE_EDOC_FAILURE","axios","defaults","baseURL","addEDocAPI","data","post","action","result","type","console","log","responce"],"mappings":";;;;yBAsBUA,O;;;yBAeAC,Y;;;yBAIeC,Q;;AAzCzB,SACEC,GADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,SANF,QAOO,oBAPP;AAQA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,yBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOJ,KAAK,CAACK,IAAN,CAAW,eAAX,EAA4BD,IAA5B,CAAP;AACD;;AACD,SAAUnB,OAAV,CAAkBqB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMd,IAAI,CAACW,UAAD,EAAaG,MAAM,CAACF,IAApB,CAAV;;AAFjB;AAEQG,UAAAA,MAFR;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEb,gBADE;AAERS,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIK,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AARJ;AASI,iBAAMnB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEZ,gBADE;AAERQ,YAAAA,IAAI,EAAE,YAAEO,QAAF,CAAWP;AAFT,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUlB,YAAV;AAAA;AAAA;AAAA;AAAA;AACEuB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AADF;AAEE,iBAAMjB,SAAS,CAACC,gBAAD,EAAmBT,OAAnB,CAAf;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  all,\n  fork,\n  takeLatest,\n  put,\n  call,\n  takeEvery\n} from \"redux-saga/effects\";\nimport {\n  ADD_EDOC_REQUEST,\n  ADD_EDOC_SECCESS,\n  ADD_EDOC_FAILURE,\n  UPDATE_EDOC_REQUEST,\n  UPDATE_EDOC_SECCESS,\n  UPDATE_EDOC_FAILURE\n} from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction addEDocAPI(data) {\n  return axios.post(\"/edoc/getEdoc\", data);\n}\nfunction* addEDoc(action) {\n  try {\n    var result = yield call(addEDocAPI, action.data);\n    yield put({\n      type: ADD_EDOC_SECCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(\"err\", e);\n    yield put({\n      type: ADD_EDOC_FAILURE,\n      data: e.responce.data\n    });\n  }\n}\nfunction* watchAddEDoc() {\n  console.log(\"watchAddEdoc\");\n  yield takeEvery(ADD_EDOC_REQUEST, addEDoc);\n}\nexport default function* edocSaga() {\n  yield all([fork(watchAddEDoc)]);\n}\n"]},"metadata":{},"sourceType":"module"}