{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Login from \"./edocLogin\";\nimport EdocMain from \"./edocMain\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_EDOC_REQUEST } from \"../../reducers/edocument01\"; // import edocMain from \"./edocMain\";\n// 컴포넌트를 import 할땐 항상 대문자 부터 이다.\n// 유저 정보에 의해 폼이 바뀌는 것\n// 이후 리덕스와 연결하여 state 중앙통제실을 만들어서 사용한다.\n\nvar Main = function Main() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.me;\n  }),\n      me = _useSelector.me,\n      isLoggedIn = _useSelector.isLoggedIn; // 여기서 state 는 전체 state (reducer/index.js - state)\n  // useEffect(() => {\n  //   console.log(\"useEffect\");\n  //   dispatch({\n  //     type: ADD_EDOC_REQUEST,\n  //     data: {\n  //       stcode: me.SUSTCODE,\n  //       scdbname: me.SCDBNAME,\n  //       schostip: me.SCHOSTIP\n  //     }\n  //   });\n  // }, []);\n  // console.log(\"? \", me, isLoggedIn);\n\n\n  return React.createElement(\"div\", null, isLoggedIn ? React.createElement(EdocMain, null) : React.createElement(Login, null));\n};\n\nMain.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"main\");\n            console.log(context.store.getState());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Main;","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/pages/edocument/index.js"],"names":["React","Login","EdocMain","useDispatch","useSelector","ADD_EDOC_REQUEST","Main","dispatch","state","me","isLoggedIn","getInitialProps","context","console","log","store","getState"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,4BAAjC,C,CACA;AACA;AAEA;AACA;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;;AADiB,qBAEUC,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAIA,KAAK,CAACC,EAAV;AAAA,GAAN,CAFrB;AAAA,MAETA,EAFS,gBAETA,EAFS;AAAA,MAELC,UAFK,gBAELA,UAFK,EAE0C;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAO,iCAAMA,UAAU,GAAG,oBAAC,QAAD,OAAH,GAAkB,oBAAC,KAAD,OAAlC,CAAP;AACD,CAhBD;;AAkBAJ,IAAI,CAACK,eAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,KAAR,CAAcC,QAAd,EAAZ;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeV,IAAf","sourcesContent":["import React from \"react\";\nimport Login from \"./edocLogin\";\nimport EdocMain from \"./edocMain\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_EDOC_REQUEST } from \"../../reducers/edocument01\";\n// import edocMain from \"./edocMain\";\n// 컴포넌트를 import 할땐 항상 대문자 부터 이다.\n\n// 유저 정보에 의해 폼이 바뀌는 것\n// 이후 리덕스와 연결하여 state 중앙통제실을 만들어서 사용한다.\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const { me, isLoggedIn } = useSelector(state => state.me); // 여기서 state 는 전체 state (reducer/index.js - state)\n  // useEffect(() => {\n  //   console.log(\"useEffect\");\n  //   dispatch({\n  //     type: ADD_EDOC_REQUEST,\n  //     data: {\n  //       stcode: me.SUSTCODE,\n  //       scdbname: me.SCDBNAME,\n  //       schostip: me.SCHOSTIP\n  //     }\n  //   });\n  // }, []);\n  // console.log(\"? \", me, isLoggedIn);\n  return <div>{isLoggedIn ? <EdocMain /> : <Login />}</div>;\n};\n\nMain.getInitialProps = async context => {\n  console.log(\"main\");\n  console.log(context.store.getState());\n};\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}