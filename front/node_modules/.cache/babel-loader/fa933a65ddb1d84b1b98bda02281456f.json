{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\"; // ------------------------------------------------------ //\n\nfunction loginAPI(data) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/login\", data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // call = 동기요청, fork = 비동기요청","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/saga/user.js"],"names":["login","watchLogin","userSaga","all","fork","takeLatest","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","axios","loginAPI","data","post","action","call","put","type","console","error"],"mappings":";;;;yBAYUA,K;;;yBAcAC,U;;;yBAQeC,Q;;AAlCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,kBAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AACA,SAAOF,KAAK,CAACG,IAAN,CAAW,QAAX,EAAqBD,IAArB,CAAP;AACD;;AACD,SAAUX,KAAV,CAAgBa,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMC,IAAI,CAACJ,QAAD,EAAWG,MAAM,CAACF,IAAlB,CAAV;;AAFJ;AAAA;AAGI,iBAAMI,GAAG,CAAC;AACR;AACAC,YAAAA,IAAI,EAAEV;AAFE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQIW,UAAAA,OAAO,CAACC,KAAR;AARJ;AASI,iBAAMH,GAAG,CAAC;AACRC,YAAAA,IAAI,EAAET;AADE,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUN,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMI,UAAU,CAACG,cAAD,EAAiBR,KAAjB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;AACA;;;AAEA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGf","sourcesContent":["import { all, fork, takeLatest } from \"redux-saga/effects\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST\n} from \"../reducers/user\";\nimport axios from \"axios\";\n// ------------------------------------------------------ //\nfunction loginAPI(data) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/login\", data);\n}\nfunction* login(action) {\n  try {\n    yield call(loginAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\nfunction* watchLogin() {\n  // takeLatest가 LOG_IN 액션이 dispatch 되길 기다려서\n  // dispatch될 때 login 제너레이터를 호출 한다.\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n// 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}\n// call = 동기요청, fork = 비동기요청\n"]},"metadata":{},"sourceType":"module"}