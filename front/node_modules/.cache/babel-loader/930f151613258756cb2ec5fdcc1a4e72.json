{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoout),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction logoutAPI() {\n  console.log(\"looutAPI\"); // 서버에 요청을 보내는 부분\n\n  return axios.post(\"/user/logout\");\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLoout() {\n  return _regeneratorRuntime.wrap(function watchLoout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // import axios from \"axios\";\n// ------------------------------------------------------ //\n\n\nfunction loginAPI(data) {\n  console.log(\"loginAPI\", data); // 서버에 요청을 보내는 부분\n\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          result = \"\";\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(loginAPI, action.data);\n\n        case 4:\n          result = _context3.sent;\n          console.log(\"result\", result);\n          _context3.next = 8;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context3.next = 15;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          console.error(\"login\", _context3.t0, result);\n          _context3.next = 15;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLoout)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // call = 동기요청, fork = 비동기요청","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/saga/user.js"],"names":["logout","watchLoout","login","watchLogin","userSaga","all","fork","takeLatest","put","call","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","axios","defaults","baseURL","logoutAPI","console","log","post","type","loginAPI","data","withCredentials","action","result","error"],"mappings":";;;;yBAiBUA,M;;;yBAYAC,U;;;yBAaAC,K;;;yBAiBAC,U;;;yBAQeC,Q;;AAnEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;;AAEA,SAASC,SAAT,GAAqB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADmB,CAEnB;;AACA,SAAOL,KAAK,CAACM,IAAN,CAAW,cAAX,CAAP;AACD;;AACD,SAAUtB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMS,IAAI,CAACU,SAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMX,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAEV;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAML,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAET;AADE,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACQ,eAAD,EAAkBf,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;;;AACA,SAASwB,QAAT,CAAkBC,IAAlB,EAAwB;AACtBL,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBI,IAAxB,EADsB,CAEtB;;AACA,SAAOT,KAAK,CAACM,IAAN,CAAW,aAAX,EAA0BG,IAA1B,EAAgC;AACrCC,IAAAA,eAAe,EAAE,IADoB,CACf;;AADe,GAAhC,CAAP;AAGD;;AACD,SAAUxB,KAAV,CAAgByB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACMC,UAAAA,MADN,GACe,EADf;AAAA;AAAA;AAGa,iBAAMnB,IAAI,CAACe,QAAD,EAAWG,MAAM,CAACF,IAAlB,CAAV;;AAHb;AAGIG,UAAAA,MAHJ;AAIIR,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBO,MAAtB;AAJJ;AAKI,iBAAMpB,GAAG,CAAC;AACR;AACAe,YAAAA,IAAI,EAAEb,cAFE;AAGRe,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAHL,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWIL,UAAAA,OAAO,CAACS,KAAR,CAAc,OAAd,gBAA0BD,MAA1B;AAXJ;AAYI,iBAAMpB,GAAG,CAAC;AACRe,YAAAA,IAAI,EAAEZ;AADE,WAAD,CAAT;;AAZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMI,UAAU,CAACK,cAAD,EAAiBV,KAAjB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;AACA;;;AAEA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,UAAD,CAAL,EAAmBG,IAAI,CAACL,UAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGf","sourcesContent":["import { all, fork, takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST\n} from \"../reducers/user\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction logoutAPI() {\n  console.log(\"looutAPI\");\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/logout\");\n}\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\nfunction* watchLoout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\n// import axios from \"axios\";\n// ------------------------------------------------------ //\nfunction loginAPI(data) {\n  console.log(\"loginAPI\", data);\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n  });\n}\nfunction* login(action) {\n  var result = \"\";\n  try {\n    result = yield call(loginAPI, action.data);\n    console.log(\"result\", result);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(\"login\", e, result);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\nfunction* watchLogin() {\n  // takeLatest가 LOG_IN 액션이 dispatch 되길 기다려서\n  // dispatch될 때 login 제너레이터를 호출 한다.\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n// 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLoout)]);\n}\n// call = 동기요청, fork = 비동기요청\n"]},"metadata":{},"sourceType":"module"}