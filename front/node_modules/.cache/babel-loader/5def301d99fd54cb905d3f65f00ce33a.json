{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\"; // _app.js 는 모든 곳에 들어가는 곳이기다.\n// 리덕스는 모든 곳에서 공유해야 한다 따라서 이곳에서 정의.\n\nimport { Provider } from \"react-redux\"; //중앙통제실 역할\n\nimport { createStore, compose, applyMiddleware } from \"redux\"; //중앙통제실 역할\n\nimport reducer from \"../reducers\"; //npm i next-redux-wrapper\n// store를 넣어줄 구현이 안되있기 때문에 next에서 제공해주는 것을 사용\n\nimport withRedux from \"next-redux-wrapper\";\nimport sagaMiddleware from \"../saga/middleware\";\nimport rootSaga from \"../saga\";\nimport withReduxSaga from \"next-redux-saga\"; //넥스트용 리덕스 사가\n\nvar Line = function Line(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return React.createElement(\"div\", null, React.createElement(Provider, {\n    store: store\n  }, React.createElement(Head, null, React.createElement(\"title\", null, \"\\uB77C\\uC778\\uD398\\uC774\\uB864 \\uC11C\\uBE44\\uC2A4\"), React.createElement(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.css\"\n  }), React.createElement(\"script\", {\n    src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.js\"\n  })), React.createElement(AppLayout, null, React.createElement(Component, pageProps))));\n}; // 서버 사이드 랜더링을 위함 (강의 59)\n\n\nLine.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var ctx, Component, pageProps;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(context); // next 에서 내려주는 context\n\n            ctx = context.ctx, Component = context.Component; // context 안에 ctx\n\n            pageProps = {};\n\n            if (!Component.getInitialProps) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 6;\n            return Component.getInitialProps(ctx);\n\n          case 6:\n            pageProps = _context.sent;\n\n          case 7:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // export default Line;\n\n\nvar configureStore = function configureStore(initialState, options) {\n  // 여기에다가 스토어 커스터마이징 (기능 추가)\n  // 리덕스가 콘솔에 노출되지 않도록 (보안)\n  var middlewares = [sagaMiddleware]; // console.log(process);\n\n  var enhancer = process.emitWarning && process.emitWarning.NODE_ENV === \"production\" //개발일때만 디벨롭툴 사용하도록 (보안)\n  ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Line)); //withReduxSaga가 내부에서 필요로 한다. - 넥스트에서 서버사이드 랜더링 하기위해서\n// const store = createStore(reducer, initialState);\n// 고위컴포넌트, 하이오더컴포넌트 - 기존컴포넌트 기능을 확장해줌.","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/pages/_app.js"],"names":["React","Head","AppLayout","Provider","createStore","compose","applyMiddleware","reducer","withRedux","sagaMiddleware","rootSaga","withReduxSaga","Line","Component","store","pageProps","getInitialProps","context","console","log","ctx","configureStore","initialState","options","middlewares","enhancer","process","emitWarning","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CAEA;AACA;;AAEA,SAASC,QAAT,QAAyB,aAAzB,C,CAAwC;;AACxC,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD,C,CAA+D;;AAC/D,OAAOC,OAAP,MAAoB,aAApB,C,CAEA;AACA;;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAA6C;;AAE7C,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAqC;AAAA,MAAlCC,SAAkC,QAAlCA,SAAkC;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAChD,SACE,iCACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAED;AAAjB,KAEE,oBAAC,IAAD,QACE,uFADF,EAEE;AACE,IAAA,GAAG,EAAC,YADN;AAEE,IAAA,IAAI,EAAC;AAFP,IAFF,EAME;AAAQ,IAAA,GAAG,EAAC;AAAZ,IANF,CAFF,EAUE,oBAAC,SAAD,QACE,oBAAC,SAAD,EAAeC,SAAf,CADF,CAVF,CADF,CADF;AAkBD,CAnBD,C,CAoBA;;;AACAH,IAAI,CAACI,eAAL;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAuB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EADqB,CAErB;;AACQG,YAAAA,GAHa,GAGMH,OAHN,CAGbG,GAHa,EAGRP,SAHQ,GAGMI,OAHN,CAGRJ,SAHQ,EAGe;;AAChCE,YAAAA,SAJiB,GAIL,EAJK;;AAAA,iBAKjBF,SAAS,CAACG,eALO;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMDH,SAAS,CAACG,eAAV,CAA0BI,GAA1B,CANC;;AAAA;AAMnBL,YAAAA,SANmB;;AAAA;AAAA,6CAQd;AAAEA,cAAAA,SAAS,EAATA;AAAF,aARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA,I,CAUA;;;AACA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAChD;AACA;AACA,MAAMC,WAAW,GAAG,CAACf,cAAD,CAApB,CAHgD,CAIhD;;AACA,MAAMgB,QAAQ,GACZC,OAAO,CAACC,WAAR,IAAuBD,OAAO,CAACC,WAAR,CAAoBC,QAApB,KAAiC,YAAxD,CAAqE;AAArE,IACIvB,OAAO,CAACC,eAAe,MAAf,SAAmBkB,WAAnB,CAAD,CADX,GAEInB,OAAO,CACLC,eAAe,MAAf,SAAmBkB,WAAnB,CADK,EAEL,OAAOK,MAAP,KAAkB,WAAlB,IACEA,MAAM,CAACC,4BAAP,KAAwC,WAD1C,GAEID,MAAM,CAACC,4BAAP,EAFJ,GAGI,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GALA,CAHb;AAUA,MAAMjB,KAAK,GAAGV,WAAW,CAACG,OAAD,EAAUe,YAAV,EAAwBG,QAAxB,CAAzB;AACAX,EAAAA,KAAK,CAACkB,QAAN,GAAiBvB,cAAc,CAACwB,GAAf,CAAmBvB,QAAnB,CAAjB;AACA,SAAOI,KAAP;AACD,CAlBD;;AAoBA,eAAeN,SAAS,CAACa,cAAD,CAAT,CAA0BV,aAAa,CAACC,IAAD,CAAvC,CAAf,C,CAA+D;AAE/D;AACA","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\";\n\n// _app.js 는 모든 곳에 들어가는 곳이기다.\n// 리덕스는 모든 곳에서 공유해야 한다 따라서 이곳에서 정의.\n\nimport { Provider } from \"react-redux\"; //중앙통제실 역할\nimport { createStore, compose, applyMiddleware } from \"redux\"; //중앙통제실 역할\nimport reducer from \"../reducers\";\n\n//npm i next-redux-wrapper\n// store를 넣어줄 구현이 안되있기 때문에 next에서 제공해주는 것을 사용\nimport withRedux from \"next-redux-wrapper\";\nimport sagaMiddleware from \"../saga/middleware\";\nimport rootSaga from \"../saga\";\nimport withReduxSaga from \"next-redux-saga\"; //넥스트용 리덕스 사가\n\nconst Line = ({ Component, store, pageProps }) => {\n  return (\n    <div>\n      <Provider store={store}>\n        {/* 이 아래 부터 모든 store를 받는다. */}\n        <Head>\n          <title>라인페이롤 서비스</title>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.css\"\n          />\n          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.js\" />\n        </Head>\n        <AppLayout>\n          <Component {...pageProps} />\n        </AppLayout>\n      </Provider>\n    </div>\n  );\n};\n// 서버 사이드 랜더링을 위함 (강의 59)\nLine.getInitialProps = async context => {\n  console.log(context);\n  // next 에서 내려주는 context\n  const { ctx, Component } = context; // context 안에 ctx\n  let pageProps = {};\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n  return { pageProps };\n};\n// export default Line;\nconst configureStore = (initialState, options) => {\n  // 여기에다가 스토어 커스터마이징 (기능 추가)\n  // 리덕스가 콘솔에 노출되지 않도록 (보안)\n  const middlewares = [sagaMiddleware];\n  // console.log(process);\n  const enhancer =\n    process.emitWarning && process.emitWarning.NODE_ENV === \"production\" //개발일때만 디벨롭툴 사용하도록 (보안)\n      ? compose(applyMiddleware(...middlewares))\n      : compose(\n          applyMiddleware(...middlewares),\n          typeof window !== \"undefined\" &&\n            window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\n            : f => f\n        );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Line)); //withReduxSaga가 내부에서 필요로 한다. - 넥스트에서 서버사이드 랜더링 하기위해서\n\n// const store = createStore(reducer, initialState);\n// 고위컴포넌트, 하이오더컴포넌트 - 기존컴포넌트 기능을 확장해줌.\n"]},"metadata":{},"sourceType":"module"}