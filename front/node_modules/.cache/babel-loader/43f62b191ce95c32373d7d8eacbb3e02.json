{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, call, takeEvery } from \"redux-saga/effects\";\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST } from \"../reducers/user\";\nimport { ADD_EDOC_REQUEST } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction loadUserAPI(data) {\n  console.log(\"loadUserAPI\"); // 서버에 쿠키보내서 로그인 여부 확인\n  // 서버사이드 랜더링에서는 이부분을 수정해야함\n\n  return axios.get(\"/user/\", {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n    // 클라이언트가 요청보낼땐 브라우저가 쿠키 동봉. 서버사이드는 브라우저가 없음\n\n  });\n}\n\nfunction loadUser(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(\"loadUser\", action);\n          result = \"\";\n          _context.prev = 2;\n          _context.next = 5;\n          return call(loadUserAPI, action.data);\n\n        case 5:\n          result = _context.sent;\n          _context.next = 8;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data[0]\n          });\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: ADD_EDOC_REQUEST,\n            data: {\n              stcode: result.data[0].SUSTCODE,\n              scdbname: result.data[0].SCDBNAME,\n              schostip: result.data[0].SCHOSTIP\n            }\n          });\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](2);\n          console.error(\"loadUserErr\", _context.t0);\n          _context.next = 17;\n          return put({\n            type: LOAD_USER_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 12]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"watchLoadUser\");\n          _context2.prev = 1;\n          _context2.next = 4;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 4:\n          _context2.next = 9;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(\"error !!!!!\", _context2.t0);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 6]]);\n}\n\nfunction logoutAPI() {\n  return axios.post(\"/user/logout\", {}, {\n    withCredentials: true\n  });\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logoutAPI);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // import axios from \"axios\";\n// ------------------------------------------------------ //\n\n\nfunction loginAPI(data) {\n  console.log(\"loginAPI\", data); // 서버에 요청을 보내는 부분\n\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          result = \"\";\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(loginAPI, action.data);\n\n        case 4:\n          result = _context5.sent;\n          _context5.next = 7;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context5.next = 9;\n          return put({\n            type: ADD_EDOC_REQUEST,\n            data: {\n              stcode: result.data.SUSTCODE,\n              scdbname: result.data.SCDBNAME,\n              schostip: result.data.SCHOSTIP\n            }\n          });\n\n        case 9:\n          _context5.next = 15;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 15;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context5.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 11]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n} // call = 동기요청, fork = 비동기요청","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/saga/user.js"],"names":["loadUser","watchLoadUser","logout","watchLogout","login","watchLogin","userSaga","all","fork","takeLatest","put","call","takeEvery","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","ADD_EDOC_REQUEST","axios","defaults","baseURL","loadUserAPI","data","console","log","get","withCredentials","action","result","type","stcode","SUSTCODE","scdbname","SCDBNAME","schostip","SCHOSTIP","error","response","logoutAPI","post","loginAPI"],"mappings":"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","sourcesContent":["import {\n  all,\n  fork,\n  takeLatest,\n  put,\n  call,\n  takeEvery\n} from \"redux-saga/effects\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST\n} from \"../reducers/user\";\nimport { ADD_EDOC_REQUEST } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction loadUserAPI(data) {\n  console.log(\"loadUserAPI\");\n  // 서버에 쿠키보내서 로그인 여부 확인\n  // 서버사이드 랜더링에서는 이부분을 수정해야함\n  return axios.get(\"/user/\", {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n    // 클라이언트가 요청보낼땐 브라우저가 쿠키 동봉. 서버사이드는 브라우저가 없음\n  });\n}\nfunction* loadUser(action) {\n  console.log(\"loadUser\", action);\n  var result = \"\";\n  try {\n    result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data[0]\n    });\n    yield put({\n      type: ADD_EDOC_REQUEST,\n      data: {\n        stcode: result.data[0].SUSTCODE,\n        scdbname: result.data[0].SCDBNAME,\n        schostip: result.data[0].SCHOSTIP\n      }\n    });\n  } catch (e) {\n    console.error(\"loadUserErr\", e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      data: e.response.data\n    });\n  }\n}\nfunction* watchLoadUser() {\n  console.log(\"watchLoadUser\");\n  try {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n  } catch (er) {\n    console.log(\"error !!!!!\", er);\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post(\n    \"/user/logout\",\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\n// import axios from \"axios\";\n// ------------------------------------------------------ //\nfunction loginAPI(data) {\n  console.log(\"loginAPI\", data);\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n  });\n}\nfunction* login(action) {\n  var result = \"\";\n  try {\n    result = yield call(loginAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_EDOC_REQUEST,\n      data: {\n        stcode: result.data.SUSTCODE,\n        scdbname: result.data.SCDBNAME,\n        schostip: result.data.SCHOSTIP\n      }\n    });\n  } catch (e) {\n    // console.log(\"loginERRER\", e.response.data);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: e.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  // takeLatest가 LOG_IN 액션이 dispatch 되길 기다려서\n  // dispatch될 때 login 제너레이터를 호출 한다.\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n// 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser)]);\n}\n// call = 동기요청, fork = 비동기요청\n"]},"metadata":{},"sourceType":"module"}