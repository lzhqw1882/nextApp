{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\";\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxSaga from \"next-redux-saga\"; //넥스트용 리덕스 사가\n// _app.js 는 모든 곳에 들어가는 곳이기다.\n// 리덕스는 모든 곳에서 공유해야 한다 따라서 이곳에서 정의.\n\nimport { createStore, compose, applyMiddleware } from \"redux\"; //중앙통제실 역할\n\nimport { Provider } from \"react-redux\"; //중앙통제실 역할\n\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\"; //npm i next-redux-wrapper\n// store를 넣어줄 구현이 안되있기 때문에 next에서 제공해주는 것을 사용\n\nimport rootSaga from \"../saga\";\n\nvar Line = function Line(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  return React.createElement(\"div\", null, React.createElement(Provider, {\n    store: store\n  }, React.createElement(Head, null, React.createElement(\"title\", null, \"\\uB77C\\uC778\\uD398\\uC774\\uB864 \\uC11C\\uBE44\\uC2A4\"), React.createElement(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.css\"\n  }), React.createElement(\"script\", {\n    src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.js\"\n  })), React.createElement(AppLayout, null, React.createElement(Component, pageProps))));\n}; // 서버 사이드 랜더링을 위함 (강의 59)\n\n\nLine.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(context) {\n    var ctx, Component, pageProps, state, cookie;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"getInit\"); // next 에서 내려주는 context\n\n            ctx = context.ctx, Component = context.Component; // context 안에 ctx\n\n            pageProps = {};\n            state = ctx.store.getState();\n            cookie = ctx.isServer ? ctx.req.headers.cookie : \"\"; //서버사이드랜더링에서 서버에 쿠키 보내기 위해 작업\n\n            if (ctx.isServer && cookie) {\n              axios.defaults.headers.Cookie = cookie;\n            }\n\n            if (!state.me.me) {\n              ctx.store.dispatch({\n                type: LOAD_USER_REQUEST\n              });\n            }\n\n            if (!Component.getInitialProps) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 10;\n            return Component.getInitialProps(ctx);\n\n          case 10:\n            pageProps = _context.sent;\n\n          case 11:\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // export default Line;\n\n\nvar configureStore = function configureStore(initialState, options) {\n  // 여기에다가 스토어 커스터마이징 (기능 추가)\n  // 리덕스가 콘솔에 노출되지 않도록 (보안)\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        console.log(\"sagaAction \", action);\n        next(action);\n      };\n    };\n  }];\n  var enhancer = process.env.NODE_ENV === \"production\" ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Line)); //withReduxSaga가 내부에서 필요로 한다. - 넥스트에서 서버사이드 랜더링 하기위해서\n// const store = createStore(reducer, initialState);\n// 고위컴포넌트, 하이오더컴포넌트 - 기존컴포넌트 기능을 확장해줌.","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/pages/_app.js"],"names":["React","Head","AppLayout","withRedux","withReduxSaga","createStore","compose","applyMiddleware","Provider","createSagaMiddleware","reducer","LOAD_USER_REQUEST","axios","rootSaga","Line","Component","store","pageProps","getInitialProps","context","console","log","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","me","dispatch","type","configureStore","initialState","options","sagaMiddleware","middlewares","next","action","enhancer","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\";\n\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxSaga from \"next-redux-saga\"; //넥스트용 리덕스 사가\n// _app.js 는 모든 곳에 들어가는 곳이기다.\n// 리덕스는 모든 곳에서 공유해야 한다 따라서 이곳에서 정의.\nimport { createStore, compose, applyMiddleware } from \"redux\"; //중앙통제실 역할\nimport { Provider } from \"react-redux\"; //중앙통제실 역할\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\n//npm i next-redux-wrapper\n// store를 넣어줄 구현이 안되있기 때문에 next에서 제공해주는 것을 사용\nimport rootSaga from \"../saga\";\n\nconst Line = ({ Component, store, pageProps }) => {\n  return (\n    <div>\n      <Provider store={store}>\n        {/* 이 아래 부터 모든 store를 받는다. */}\n        <Head>\n          <title>라인페이롤 서비스</title>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.css\"\n          />\n          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.js\" />\n        </Head>\n        <AppLayout>\n          <Component {...pageProps} />\n        </AppLayout>\n      </Provider>\n    </div>\n  );\n};\n// 서버 사이드 랜더링을 위함 (강의 59)\nLine.getInitialProps = async context => {\n  console.log(\"getInit\");\n  // next 에서 내려주는 context\n  const { ctx, Component } = context; // context 안에 ctx\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\"; //서버사이드랜더링에서 서버에 쿠키 보내기 위해 작업\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  if (!state.me.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return { pageProps };\n};\n// export default Line;\nconst configureStore = (initialState, options) => {\n  // 여기에다가 스토어 커스터마이징 (기능 추가)\n  // 리덕스가 콘솔에 노출되지 않도록 (보안)\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [\n    sagaMiddleware,\n    store => next => action => {\n      console.log(\"sagaAction \", action);\n      next(action);\n    }\n  ];\n  const enhancer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : compose(\n          applyMiddleware(...middlewares),\n          !options.isServer &&\n            window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\n            : f => f\n        );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Line)); //withReduxSaga가 내부에서 필요로 한다. - 넥스트에서 서버사이드 랜더링 하기위해서\n\n// const store = createStore(reducer, initialState);\n// 고위컴포넌트, 하이오더컴포넌트 - 기존컴포넌트 기능을 확장해줌.\n"]},"metadata":{},"sourceType":"module"}