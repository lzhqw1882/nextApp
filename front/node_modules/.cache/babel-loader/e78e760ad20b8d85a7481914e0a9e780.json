{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Menu, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LOG_OUT_REQUEST, LOAD_USER_REQUEST } from \"../reducers/user\";\n\nvar AppLayout = function AppLayout(_ref) {\n  var children = _ref.children;\n\n  var _useSelector = useSelector(function (state) {\n    return state.me;\n  }),\n      isLoggedIn = _useSelector.isLoggedIn,\n      me = _useSelector.me; // 여기서 state 는 전체 state (reducer/index.js - state)\n\n\n  var dispatch = useDispatch();\n\n  var onLogOut = function onLogOut(e) {\n    e.preventDefault();\n    dispatch({\n      type: LOG_OUT_REQUEST\n    });\n  }; //쿠키로 로그인여부 판단하여 유저정보 가져오기\n  // redux, saga, backend /user 부분 참고\n  // 최상위 루트에서 하는 이유는 매번 로드 될때마다 로그인 여부를 판단하여야 하기 때문이다.\n  // 보안 및 세션만료 체크 가능\n  // 서버쪽에선 매번 디비에 붙어야 하는 부담을 덜기 위해 캐싱처리 과정이 필요함 - 이후 진행\n\n\n  useEffect(function () {\n    if (!me) {\n      dispatch({\n        type: LOAD_USER_REQUEST\n      });\n    }\n  }, []);\n  return React.createElement(\"div\", null, React.createElement(Menu, {\n    mode: \"horizontal\"\n  }, React.createElement(Menu.Item, {\n    key: \"ntc\"\n  }, React.createElement(Link, {\n    href: \"/\"\n  }, React.createElement(\"a\", null, \"HOME\"))), React.createElement(Menu.Item, {\n    key: \"edoc\"\n  }, React.createElement(Link, {\n    href: \"/edocument\"\n  }, React.createElement(\"a\", null, \"\\uC804\\uC790\\uBB38\\uC11C\"))), isLoggedIn && React.createElement(Button, {\n    onClick: onLogOut\n  }, \"LOG OUT\")), children);\n};\n\nexport default AppLayout;","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/components/AppLayout.js"],"names":["React","useEffect","Link","Menu","Input","Button","useSelector","useDispatch","LOG_OUT_REQUEST","LOAD_USER_REQUEST","AppLayout","children","state","me","isLoggedIn","dispatch","onLogOut","e","preventDefault","type"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,kBAAnD;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,qBACPL,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,EAAV;AAAA,GAAN,CADJ;AAAA,MAC1BC,UAD0B,gBAC1BA,UAD0B;AAAA,MACdD,EADc,gBACdA,EADc,EACyB;;;AAC3D,MAAME,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,MAAMS,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC,EAAI;AACpBA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD,GALD,CAJkC,CAWlC;AACA;AACA;AACA;AACA;;;AACAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACY,EAAL,EAAS;AACPE,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEV;AADC,OAAD,CAAR;AAGD;AACF,GANQ,EAMN,EANM,CAAT;AAQA,SACE,iCACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,GAAG,EAAE;AAAhB,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE,sCADF,CADF,CADF,EAME,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,GAAG,EAAE;AAAhB,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC;AAAX,KACE,0DADF,CADF,CANF,EAWGK,UAAU,IAAI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEE;AAAjB,eAXjB,CADF,EAcGL,QAdH,CADF;AAkBD,CA1CD;;AA4CA,eAAeD,SAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Menu, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LOG_OUT_REQUEST, LOAD_USER_REQUEST } from \"../reducers/user\";\nconst AppLayout = ({ children }) => {\n  const { isLoggedIn, me } = useSelector(state => state.me); // 여기서 state 는 전체 state (reducer/index.js - state)\n  const dispatch = useDispatch();\n\n  const onLogOut = e => {\n    e.preventDefault();\n    dispatch({\n      type: LOG_OUT_REQUEST\n    });\n  };\n\n  //쿠키로 로그인여부 판단하여 유저정보 가져오기\n  // redux, saga, backend /user 부분 참고\n  // 최상위 루트에서 하는 이유는 매번 로드 될때마다 로그인 여부를 판단하여야 하기 때문이다.\n  // 보안 및 세션만료 체크 가능\n  // 서버쪽에선 매번 디비에 붙어야 하는 부담을 덜기 위해 캐싱처리 과정이 필요함 - 이후 진행\n  useEffect(() => {\n    if (!me) {\n      dispatch({\n        type: LOAD_USER_REQUEST\n      });\n    }\n  }, []);\n\n  return (\n    <div>\n      <Menu mode=\"horizontal\">\n        <Menu.Item key={\"ntc\"}>\n          <Link href=\"/\">\n            <a>HOME</a>\n          </Link>\n        </Menu.Item>\n        <Menu.Item key={\"edoc\"}>\n          <Link href=\"/edocument\">\n            <a>전자문서</a>\n          </Link>\n        </Menu.Item>\n        {isLoggedIn && <Button onClick={onLogOut}>LOG OUT</Button>}\n      </Menu>\n      {children}\n    </div>\n  );\n};\n\nexport default AppLayout;\n"]},"metadata":{},"sourceType":"module"}