{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useState } from \"react\"; // custom hook 사용하기\n// 위와 같이 각각의 state 마다 핸들러를 만들어줄 경우 코드가 많아짐과 관리가 힘들어진다.\n// 아래와같이 input에 관련된 커스텀을 만들고 사용하면\n// const onChagePw 등의 단순 input 함수는 재사용 할수 있다.\n\nexport var useInput = function useInput(initValue) {\n  var _useState = useState(initValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setter = _useState2[1];\n\n  var onChange = function onChange(e) {\n    setter(e.target.value);\n  };\n\n  return {\n    value: value,\n    onChange: onChange\n  };\n};","map":{"version":3,"sources":["/Users/linepayroll/Desktop/nextApp/front/functions/UseInput.js"],"names":["useState","useInput","initValue","value","setter","onChange","e","target"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,SAAS,EAAI;AAAA,kBACXF,QAAQ,CAACE,SAAD,CADG;AAAA;AAAA,MAC5BC,KAD4B;AAAA,MACrBC,MADqB;;AAEnC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC,EAAI;AACpBF,IAAAA,MAAM,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAN;AACD,GAFD;;AAGA,SAAO;AAAEA,IAAAA,KAAK,EAALA,KAAF;AAASE,IAAAA,QAAQ,EAARA;AAAT,GAAP;AACD,CANM","sourcesContent":["import { useState } from \"react\";\n\n// custom hook 사용하기\n// 위와 같이 각각의 state 마다 핸들러를 만들어줄 경우 코드가 많아짐과 관리가 힘들어진다.\n// 아래와같이 input에 관련된 커스텀을 만들고 사용하면\n// const onChagePw 등의 단순 input 함수는 재사용 할수 있다.\nexport const useInput = initValue => {\n  const [value, setter] = useState(initValue);\n  const onChange = e => {\n    setter(e.target.value);\n  };\n  return { value, onChange };\n};\n"]},"metadata":{},"sourceType":"module"}