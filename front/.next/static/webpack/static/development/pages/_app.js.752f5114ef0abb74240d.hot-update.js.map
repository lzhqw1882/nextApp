{"version":3,"file":"static/webpack/static/development/pages/_app.js.752f5114ef0abb74240d.hot-update.js","sources":["webpack:///./components/AppLayout.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport Link from \"next/link\";\nimport { Menu, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { LOG_OUT_REQUEST, LOAD_USER_REQUEST } from \"../reducers/user\";\nconst AppLayout = ({ children }) => {\n  const { isLoggedIn, me } = useSelector(state => state.me); // 여기서 state 는 전체 state (reducer/index.js - state)\n  const dispatch = useDispatch();\n\n  const onLogOut = e => {\n    e.preventDefault();\n    dispatch({\n      type: LOG_OUT_REQUEST\n    });\n  };\n\n  //쿠키로 로그인여부 판단하여 유저정보 가져오기\n  // redux, saga, backend /user 부분 참고\n  // 최상위 루트에서 하는 이유는 매번 로드 될때마다 로그인 여부를 판단하여야 하기 때문이다.\n  // 보안 및 세션만료 체크 가능\n  // 서버쪽에선 매번 디비에 붙어야 하는 부담을 덜기 위해 캐싱처리 과정이 필요함 - 이후 진행\n  useEffect(() => {\n    if (!me) {\n      console.log(\"dispatch !!\");\n      dispatch({\n        type: LOAD_USER_REQUEST\n      });\n    }\n  }, [me]);\n\n  return (\n    <div>\n      <Menu mode=\"horizontal\">\n        <Menu.Item key={\"ntc\"}>\n          <Link href=\"/\">\n            <a>HOME</a>\n          </Link>\n        </Menu.Item>\n        <Menu.Item key={\"edoc\"}>\n          <Link href=\"/edocument\">\n            <a>전자문서</a>\n          </Link>\n        </Menu.Item>\n        {isLoggedIn && <Button onClick={onLogOut}>LOG OUT</Button>}\n      </Menu>\n      {children}\n    </div>\n  );\n};\n\nexport default AppLayout;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAIA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}