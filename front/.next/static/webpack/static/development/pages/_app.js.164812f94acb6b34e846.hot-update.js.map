{"version":3,"file":"static/webpack/static/development/pages/_app.js.164812f94acb6b34e846.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from \"react\";\nimport Head from \"next/head\";\nimport AppLayout from \"../components/AppLayout\";\n\n// _app.js 는 모든 곳에 들어가는 곳이기다.\n// 리덕스는 모든 곳에서 공유해야 한다 따라서 이곳에서 정의.\n\nimport { Provider } from \"react-redux\"; //중앙통제실 역할\nimport { createStore, compose, applyMiddleware } from \"redux\"; //중앙통제실 역할\nimport reducer from \"../reducers\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport axios from \"axios\";\n//npm i next-redux-wrapper\n// store를 넣어줄 구현이 안되있기 때문에 next에서 제공해주는 것을 사용\nimport withRedux from \"next-redux-wrapper\";\nimport sagaMiddleware from \"../saga/middleware\";\nimport rootSaga from \"../saga\";\nimport withReduxSaga from \"next-redux-saga\"; //넥스트용 리덕스 사가\n\nconst Line = ({ Component, store, pageProps }) => {\n  console.log(\"pageProps\", pageProps);\n  return (\n    <div>\n      <Provider store={store}>\n        {/* 이 아래 부터 모든 store를 받는다. */}\n        <Head>\n          <title>라인페이롤 서비스</title>\n          <link\n            rel=\"stylesheet\"\n            href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.css\"\n          />\n          <script src=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.18.2/antd.js\" />\n        </Head>\n        <AppLayout>\n          <Component {...pageProps} />\n        </AppLayout>\n      </Provider>\n    </div>\n  );\n};\n// 서버 사이드 랜더링을 위함 (강의 59)\nLine.getInitialProps = async context => {\n  // next 에서 내려주는 context\n  const { ctx, Component } = context; // context 안에 ctx\n  let pageProps = {};\n  const state = ctx.store.getState();\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\"; //서버사이드랜더링에서 서버에 쿠키 보내기 위해 작업\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n  // console.log(\"line\", state);\n  if (state.me.me === null) {\n    // console.log(\"linestateme\", state.me.me);\n    ctx.store.dispatch({ type: LOAD_USER_REQUEST });\n  }\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return { pageProps };\n};\n// export default Line;\nconst configureStore = (initialState, options) => {\n  // 여기에다가 스토어 커스터마이징 (기능 추가)\n  // 리덕스가 콘솔에 노출되지 않도록 (보안)\n  const middlewares = [sagaMiddleware];\n  // console.log(process);\n  const enhancer =\n    process.emitWarning && process.emitWarning.NODE_ENV === \"production\" //개발일때만 디벨롭툴 사용하도록 (보안)\n      ? compose(applyMiddleware(...middlewares))\n      : compose(\n          applyMiddleware(...middlewares),\n          typeof window !== \"undefined\" &&\n            window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\n            : f => f\n        );\n  const store = createStore(reducer, initialState, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default withRedux(configureStore)(withReduxSaga(Line)); //withReduxSaga가 내부에서 필요로 한다. - 넥스트에서 서버사이드 랜더링 하기위해서\n\n// const store = createStore(reducer, initialState);\n// 고위컴포넌트, 하이오더컴포넌트 - 기존컴포넌트 기능을 확장해줌.\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAKA;AACA;AAFA;AAIA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAgBA;AACA;AAjBA;AAAA;AAmBA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}