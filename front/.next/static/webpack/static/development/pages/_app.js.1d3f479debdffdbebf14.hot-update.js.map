{"version":3,"file":"static/webpack/static/development/pages/_app.js.1d3f479debdffdbebf14.hot-update.js","sources":["webpack:///./saga/user.js"],"sourcesContent":["import {\n  all,\n  fork,\n  takeLatest,\n  put,\n  call,\n  takeEvery\n} from \"redux-saga/effects\";\nimport {\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOAD_USER_SUCCESS,\n  LOAD_USER_FAILURE,\n  LOAD_USER_REQUEST\n} from \"../reducers/user\";\nimport { ADD_EDOC_REQUEST } from \"../reducers/edocument01\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:5000\";\n\nfunction loadUserAPI(data) {\n  // 서버에 쿠키보내서 로그인 여부 확인\n  // 서버사이드 랜더링에서는 이부분을 수정해야함\n  return axios.get(\"/user/\", {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n    // 클라이언트가 요청보낼땐 브라우저가 쿠키 동봉. 서버사이드는 브라우저가 없음\n  });\n}\nfunction* loadUser(action) {\n  var result = \"\";\n  try {\n    result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_EDOC_REQUEST,\n      data: {\n        stcode: result.data[0].SUSTCODE,\n        scdbname: result.data[0].SCDBNAME,\n        schostip: result.data[0].SCHOSTIP\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_FAILURE,\n      data: e.response.data\n    });\n  }\n}\nfunction* watchLoadUser() {\n  try {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n  } catch (e) {\n    console.log(\"watchLoadUsererr\", e);\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post(\n    \"/user/logout\",\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\nfunction* logout() {\n  try {\n    yield call(logoutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\nfunction* watchLogout() {\n  yield takeEvery(LOG_OUT_REQUEST, logout);\n}\n\n// import axios from \"axios\";\n// ------------------------------------------------------ //\nfunction loginAPI(data) {\n  // 서버에 요청을 보내는 부분\n  return axios.post(\"/user/login\", data, {\n    withCredentials: true // 쿠키를 받기 위함. 서버쪽도 설정해야함 - index.js\n  });\n}\nfunction* login(action) {\n  var result = \"\";\n  try {\n    result = yield call(loginAPI, action.data);\n    console.log(\"loginAPI2323\", result);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_EDOC_REQUEST,\n      data: {\n        stcode: result.data.SUSTCODE,\n        scdbname: result.data.SCDBNAME,\n        schostip: result.data.SCHOSTIP\n      }\n    });\n  } catch (e) {\n    // console.log(\"loginERRER\", e.response.data);\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: e.response.data\n    });\n  }\n}\nfunction* watchLogin() {\n  // takeLatest가 LOG_IN 액션이 dispatch 되길 기다려서\n  // dispatch될 때 login 제너레이터를 호출 한다.\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n// 세가지 가 세트 !! //\n// ------------------------------------------------------ //\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchLoadUser)]);\n}\n// call = 동기요청, fork = 비동기요청\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;AAuBA;;;AAiBA;;;AAaA;;;AAYA;;;AA0BA;;;AAQA;AACA;AAnIA;AAQA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAJA;AAGA;AAHA;AAIA;AACA;AACA;AAFA;AACA;AALA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AAFA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAIA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAFA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAJA;AAGA;AACA;AAJA;AAKA;AACA;AACA;AACA;AAHA;AACA;AANA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAXA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAoBA;AACA;AACA;AAFA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}